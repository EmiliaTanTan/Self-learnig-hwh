Finaly!! Object-Oriented Programming!!!
封装 继承 多态

Demo:
      #include <iostream>
      using namespace std;
      const double PI = 3.14;
      // 求⚪的周长
      // 2 * 3。14 * r
      class Circle {
      	// 访问权限
      	// 公共权限
      public:
      	// 属性
      	int r;
      	// 行为
      	// 获取圆的周长
      	double circumference()
      	{
      		return 2 * PI * r;
      	}
      
      };
      int main()
      {
      	// 通过⚪类创建一个具体的⚪
      	Circle cl;
      	cl.r = 10;
      	cout << "圆的周长为  ：" << cl.circumference() << endl;
      	system("pause");
      	return 0;
      }
我们把类中的属性和方法， 统一称为行为

访问权限
    public 类内，外可以访问到成员
    protected
    private
// 后面两个都是类内可以访问， 类外不可以访问

// 当我们继承的时候， 父亲的保护权限， 可以由儿子访问
// 父类的私有权限， 儿子不可以访问

在  C++ 中， struct 和 class 唯一的区别在于：
     struct 的默认权限是公共， class 的默认权限是私有

感觉面向对象还是很简单的！
一种常用的解决访问私有成员的方法：
    利用我们自己提供的接口！！！ 我们做什么事， 只能够从public中公开的接口去访问！！


构造函数 和 析构函数
      1. 构造函数没有返回值， 也不用写void
      2. 函数名与类名相同
      3. 可以有参数， 可以发生操作符重载
      4. 创建对象时， 这个函数会自动调用， 而且仅仅调用一次

Demo:
            # include <iostream>
            using namespace std;
            // 对象的初始化和清理
            class Person {
            public:
            	Person() {
            		cout << "构造函数的调用" << endl;
            	}
            };
            
            void test01()
            {
            	Person p;
            }
            int main()
            {
            	test01();
            	system("pause");
            	return 0;
            }
// 输出结果： 构造函数的调用

析构函数： 
      1.没有返回值， 也不用写void
      2.函数名就是类名， 记得在开头加上波浪号
      3.析构函数不可以有参数， 因而不可以发生重载
      4.对象在销毁前会自动调用析构函数， 并且只会调用一次
Demo:
            # include <iostream>
            using namespace std;
            // 对象的初始化和清理
            class Person {
            public:
            	Person() {
            		cout << "构造函数的调用" << endl;
            	}
            	~Person() {
            		cout << "Person的析构函数的调用" << endl;
            	}
            };
            
            void test01()
            {
            	Person p;
            }
            int main()
            {
            	test01();
            	system("pause");
            	return 0;
            }
// 注意到， 构造函数和析构函数都会被调用到！！
// 这是因为， 创建出来的对象存储在栈区， 函数调用结束后， 对象会被自动销毁

构造函数与析构函数是必须有的， 如果我们不写的话， 编译器会给我们提供空实现

构造函数的分类以及调用：
      按参数分为: 有参构造 和 无参构造
      按类型分为: 普通构造 和 拷贝构造
三种方法：
      括号法
      显示法
      隐式转换法
Demo:
      Person(const Person &p) # 拷贝构造函数的写法， 说实话， 还是有点复杂的
